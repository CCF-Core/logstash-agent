# Grok pattern match for MySQL Logs
filter {
  grok {
    match => { "message" => '%{TIMESTAMP_ISO8601}%{SPACE}%{INT:mysql_connection_id} %{WORD:mysql_event_type}%{SPACE}%{GREEDYDATA:mysql_event_details}' }
  }
  # Drop queries for global status (used by Metricbeat and others to get metrics for MySQL)
  if [message] =~ /SHOW.*GLOBAL.*STATUS/ {
    drop {}
  }
}

filter {
  if [mysql_event_details] {
    # Not a full list, but parsing the more common SQL statement types so we can know what action was performed and on what object
    # TODO(chrchand): 1) Need to make strings case insensitive
    #                 2) Need to add Grok pattern for CREATE statements
    grok {
      match => { "mysql_event_details" => '%{WORD:mysql_query_verb} %{DATA:mysql_query_fields} FROM %{NOTSPACE:mysql_table}' }
      match => { "mysql_event_details" => '%{WORD:mysql_query_verb} %{NOTSPACE:mysql_table} SET %{DATA:mysql_query_fields}' }
      match => { "mysql_event_details" => '%{WORD:mysql_query_verb} INTO %{NOTSPACE:mysql_table} \(%{DATA:mysql_query_fields}\)' }
      match => { "mysql_event_details" => '%{WORD:mysql_query_verb} FROM %{NOTSPACE:mysql_table} WHERE %{GREEDYDATA:mysql_delete_criteria}' }
      match => { "mysql_event_details" => '%{WORD:mysql_query_verb} (?:database|table|tablespace|event|function|trigger|view|index|server) %{NOTSPACE:mysql_dropped_object}' }
    }
  }
}
